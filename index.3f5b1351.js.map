{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,C,C,E,O,A,S,C,E,G,M,O,C,G,O,C,E,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,C,G,E,M,G,G,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,E,I,A,W,M,A,U,6I,G,CCKA,IAAM,EAAe,SAAS,aAAa,CAAC,eACtC,EAAkB,SAAS,aAAa,CAAC,kBACzC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAkB,SAAS,aAAa,CAAC,kBAGzC,EAAY,AADJ,SAAS,aAAa,CAAC,UACb,aAAa,CAAC,SAEtC,SAAS,EAAa,CAAK,EACzB,IAAM,EAAO,EAAM,gBAAgB,CAAC,MAIpC,MAAO,CAHW,EAAK,MAAM,CACT,CAAI,CAAC,EAAE,CAAG,CAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAG,EAEzB,AACjC,CAEA,SAAS,EAAmB,CAAS,CAAE,CAAY,EACjD,EAAa,QAAQ,CAAG,GApBR,EAqBhB,EAAa,QAAQ,CAAG,GApBR,GAqBhB,EAAgB,QAAQ,CAAG,GAtBX,EAuBhB,EAAgB,QAAQ,CAAG,GAtBX,EAuBlB,CA2BA,EAAa,gBAAgB,CAAC,QAAS,WACrC,IAAkC,EAAA,EAAA,EAAa,GAAA,GAAxC,EAA2B,CAAA,CAAA,EAAA,CAAhB,EAAgB,CAAlC,CAAA,EAAA,CAEI,EAtDY,IAuDd,AAdJ,SAAmB,CAAK,EACtB,EAAM,gBAAgB,CAAC,MAAM,EAC/B,EAYc,GACV,EAAmB,EAAY,EAAG,GAEtC,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WACxC,IAAiC,EAAA,EAAA,EAAa,GAAA,GAAvC,EAA0B,CAAA,CAAA,EAAA,CAAf,EAAe,CAAjC,CAAA,EAAA,CAEI,EA/DY,IAgEd,AAnBJ,SAAsB,CAAK,EAGzB,AAFa,EAAM,gBAAgB,CAAC,MAE/B,OAAO,CAAC,SAAC,CAAd,EAAsB,OAAA,EAAI,gBAAgB,CAAC,MAAM,E,EACnD,EAeiB,GACb,EAAmB,EAAW,EAAc,GAEhD,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACrC,IAAiC,EAAA,EAAA,EAAa,GAAA,GAAvC,EAA0B,CAAA,CAAA,EAAA,CAAf,EAAe,CAAjC,CAAA,EAAA,CAEI,EAvEY,KAwEd,AA/CJ,SAAgB,CAAK,CAAE,CAAW,EAGhC,IAAK,IAFC,EAAS,SAAS,aAAa,CAAC,MAE7B,EAAI,EAAG,EAAI,EAAa,IAC/B,EAAO,MAAM,CAAC,SAAS,aAAa,CAAC,OAEvC,EAAM,MAAM,CAAC,EACf,EAwCW,EAAW,GAClB,EAAmB,EAAY,EAAG,GAEtC,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WACxC,IAAiC,EAAA,EAAA,EAAa,GAAA,GAAvC,EAA0B,CAAA,CAAA,EAAA,CAAf,EAAe,CAAjC,CAAA,EAAA,CAEI,EAhFY,KAiFd,AA/CJ,SAAmB,CAAK,EAGtB,AAFa,EAAM,gBAAgB,CAAC,MAE/B,OAAO,CAAC,SAAC,CAAd,EAAsB,OAAA,EAAI,MAAM,CAAC,SAAS,aAAa,CAAC,M,EAC1D,EA2Cc,GACV,EAAmB,EAAW,EAAc,GAEhD","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar MIN_COUNT = 2;\nvar MAX_COUNT = 10;\nvar removeRowBtn = document.querySelector(\".remove-row\");\nvar removeColumnBtn = document.querySelector(\".remove-column\");\nvar appendRowBtn = document.querySelector(\".append-row\");\nvar appendColumnBtn = document.querySelector(\".append-column\");\nvar field = document.querySelector(\".field\");\nvar fieldBody = field.querySelector(\"tbody\");\nfunction getTableSize(table) {\n    var rows = table.querySelectorAll(\"tr\");\n    var rowsCount = rows.length;\n    var columnCount = rows[0] ? rows[0].children.length : 0;\n    return [\n        rowsCount,\n        columnCount\n    ];\n}\nfunction updateButtonStates(rowsCount, columnsCount) {\n    removeRowBtn.disabled = rowsCount <= MIN_COUNT;\n    appendRowBtn.disabled = rowsCount >= MAX_COUNT;\n    removeColumnBtn.disabled = columnsCount <= MIN_COUNT;\n    appendColumnBtn.disabled = columnsCount >= MAX_COUNT;\n}\nfunction addRow(table, columnCount) {\n    var newRow = document.createElement(\"tr\");\n    for(var i = 0; i < columnCount; i++)newRow.append(document.createElement(\"td\"));\n    table.append(newRow);\n}\nfunction addColumn(table) {\n    var rows = table.querySelectorAll(\"tr\");\n    rows.forEach(function(row) {\n        return row.append(document.createElement(\"td\"));\n    });\n}\nfunction removeRow(table) {\n    table.lastElementChild.remove();\n}\nfunction removeColumn(table) {\n    var rows = table.querySelectorAll(\"tr\");\n    rows.forEach(function(row) {\n        return row.lastElementChild.remove();\n    });\n}\nremoveRowBtn.addEventListener(\"click\", function() {\n    var _getTableSize = _sliced_to_array(getTableSize(fieldBody), 2), rowsCount = _getTableSize[0], columnsCount = _getTableSize[1];\n    if (rowsCount > MIN_COUNT) {\n        removeRow(fieldBody);\n        updateButtonStates(rowsCount - 1, columnsCount);\n    }\n});\nremoveColumnBtn.addEventListener(\"click\", function() {\n    var _getTableSize = _sliced_to_array(getTableSize(fieldBody), 2), rowsCount = _getTableSize[0], columnCount = _getTableSize[1];\n    if (columnCount > MIN_COUNT) {\n        removeColumn(fieldBody);\n        updateButtonStates(rowsCount, columnCount - 1);\n    }\n});\nappendRowBtn.addEventListener(\"click\", function() {\n    var _getTableSize = _sliced_to_array(getTableSize(fieldBody), 2), rowsCount = _getTableSize[0], columnCount = _getTableSize[1];\n    if (rowsCount < MAX_COUNT) {\n        addRow(fieldBody, columnCount);\n        updateButtonStates(rowsCount + 1, columnCount);\n    }\n});\nappendColumnBtn.addEventListener(\"click\", function() {\n    var _getTableSize = _sliced_to_array(getTableSize(fieldBody), 2), rowsCount = _getTableSize[0], columnCount = _getTableSize[1];\n    if (columnCount < MAX_COUNT) {\n        addColumn(fieldBody);\n        updateButtonStates(rowsCount, columnCount + 1);\n    }\n});\n\n//# sourceMappingURL=index.3f5b1351.js.map\n","'use strict';\n\nconst MIN_COUNT = 2;\nconst MAX_COUNT = 10;\n\nconst removeRowBtn = document.querySelector('.remove-row');\nconst removeColumnBtn = document.querySelector('.remove-column');\nconst appendRowBtn = document.querySelector('.append-row');\nconst appendColumnBtn = document.querySelector('.append-column');\n\nconst field = document.querySelector('.field');\nconst fieldBody = field.querySelector('tbody');\n\nfunction getTableSize(table) {\n  const rows = table.querySelectorAll('tr');\n  const rowsCount = rows.length;\n  const columnCount = rows[0] ? rows[0].children.length : 0;\n\n  return [rowsCount, columnCount];\n}\n\nfunction updateButtonStates(rowsCount, columnsCount) {\n  removeRowBtn.disabled = rowsCount <= MIN_COUNT;\n  appendRowBtn.disabled = rowsCount >= MAX_COUNT;\n  removeColumnBtn.disabled = columnsCount <= MIN_COUNT;\n  appendColumnBtn.disabled = columnsCount >= MAX_COUNT;\n}\n\nfunction addRow(table, columnCount) {\n  const newRow = document.createElement('tr');\n\n  for (let i = 0; i < columnCount; i++) {\n    newRow.append(document.createElement('td'));\n  }\n  table.append(newRow);\n}\n\nfunction addColumn(table) {\n  const rows = table.querySelectorAll('tr');\n\n  rows.forEach((row) => row.append(document.createElement('td')));\n}\n\nfunction removeRow(table) {\n  table.lastElementChild.remove();\n}\n\nfunction removeColumn(table) {\n  const rows = table.querySelectorAll('tr');\n\n  rows.forEach((row) => row.lastElementChild.remove());\n}\n\nremoveRowBtn.addEventListener('click', () => {\n  const [rowsCount, columnsCount] = getTableSize(fieldBody);\n\n  if (rowsCount > MIN_COUNT) {\n    removeRow(fieldBody);\n    updateButtonStates(rowsCount - 1, columnsCount);\n  }\n});\n\nremoveColumnBtn.addEventListener('click', () => {\n  const [rowsCount, columnCount] = getTableSize(fieldBody);\n\n  if (columnCount > MIN_COUNT) {\n    removeColumn(fieldBody);\n    updateButtonStates(rowsCount, columnCount - 1);\n  }\n});\n\nappendRowBtn.addEventListener('click', () => {\n  const [rowsCount, columnCount] = getTableSize(fieldBody);\n\n  if (rowsCount < MAX_COUNT) {\n    addRow(fieldBody, columnCount);\n    updateButtonStates(rowsCount + 1, columnCount);\n  }\n});\n\nappendColumnBtn.addEventListener('click', () => {\n  const [rowsCount, columnCount] = getTableSize(fieldBody);\n\n  if (columnCount < MAX_COUNT) {\n    addColumn(fieldBody);\n    updateButtonStates(rowsCount, columnCount + 1);\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_sliced_to_array","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","push","value","err","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","_non_iterable_rest","TypeError","removeRowBtn","document","querySelector","removeColumnBtn","appendRowBtn","appendColumnBtn","fieldBody","field","getTableSize","table","rows","querySelectorAll","children","updateButtonStates","rowsCount","columnsCount","disabled","addEventListener","_getTableSize","removeRow","lastElementChild","remove","columnCount","removeColumn","forEach","row","addRow","newRow","createElement","append","addColumn"],"version":3,"file":"index.3f5b1351.js.map"}